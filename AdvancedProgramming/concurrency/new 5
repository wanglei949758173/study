多线程的优点
  资源利用率高
    CPU在等待I/O的时候可以做一些其他的事
  响应速度快
    一个服务在处理一个耗时较长的请求时，可以使用多线程处理另一个请求

多线程的代价
  上下文切换的开销
    CPU执行一个线程，切换到另一个线程时，需要保存当前执行线程的信息
  增加资源的消耗
    每一个线程需要一部分内存来维护自己的堆栈信息
    
并行工作者模型
  把任务委托给多个worker去执行
  优点：好理解
  缺点：
    1、访问共享数据时，需要解决修改共享数据对其他数据可见的问题，以及同步、死锁的问题
    2、高竞争会导致一定程度的串行化（使用非阻塞算法可以改善此问题）
    3、任务顺序是不确定的
    
流水线模式
  一个worker只负责一部分的工作，例如：I/O Worker只负责I/O, 数据处理Worker负责数据处理
  Actor模型和Channel模型
  优点：
    1、无需共享的状态
    2、有状态的工作者（工作完了将自己的状态向外输出）
    3、合理的作业顺序
    4、较好的硬件整合（处理一件事是单线程的，能够设计出更优的数据结构和算法）
  缺点：
    1、追踪困难（多个工作者分布在不同的类中，追踪任务被谁执行比较困难）
    2、代码变得复杂（回调地狱）

函数式并行
  ForkAndJoinPool
  Stream