类加载
	在JAVA代码中，类型的加载、连接与初始化过程都是在程序运行期间完成的
	加载：查找并加载类的二进制数据
	连接：
		-验证：确保被加载的类的正确性
		-准备：为类的静态变量分配内存，并将其初始化为默认值
			class Test {
				public static int a = 1;
			}
			在准备阶段会给a赋值为0
		-解析：把类中的符号引用转换为直接引用
	初始化：为类的静态变量赋予正确的初始值
		class Test {
			public static int a = 1;
		}
		在初始化阶段会给a赋值为1
		
	Java程序对类的使用方式分为两种：
		-主动使用
		-被动使用
		
		所有的Java虚拟机实现必须在每个类或接口被Java程序”首次主动使用“时才初始化他们
			主动使用(7种)
				-创建类的实例
				-访问某个类或接口的静态变量，或者对该静态变量赋值 getstatic putstatic
				-调用类的静态方法	invokestatic
				-反射
				-初始化一个类的子类
				-JAVA虚拟机启动时被标明为启动类的类 (main()方法的类)
				-JDK1.7k开始提供动态语言支持:
					java.lang.invoke.MethodHandle实例的解析结果REF_getStatic,REF_putStatic,
					REF_invokeStatic句柄对应的类没有初始化，则初始化
		被动使用不会导致进入到初始化阶段
		
		
	类加载：
		类加载时将.class文件中的二进制数据读入到内存中，将其放进方法去，然后再内存中创建一个
		java.lang.Class对象。
		
		加载方式
			-从本地系统中直接加载
			-通过网络下载.class文件
			-从zip，jar等归档文件中加载.class文件
			-从专有数据库中提取.class文件
			-将Java源文件动态编译为.class文件
			
	-XX:+TraceClassLoading
	-XX:+<option>：表示开启option选项
	-XX:-<option>：表示关闭option选项
	-XX:<option>=<value>：表示将option选项的值设置为value
	
	常量在编译阶段会存存入到 调用 这个常量的方法所在的类的常量池中
    本质上，调用类并没有直接引用到定义常量的类，因此并不会触发定义常量类的初始化
    注意：这里指的是将常量存放到了MyTest2的常量池中，之后MyTest2与MyParent2就没有任何关系了
    甚至，我们可以将MyParent2的class文件删除
	
	助记符：
         ldc表示将int,float或是String类型的常量值从常量池中推送至栈顶
         bipush表示将单字节（-128-127）的常量值推送至栈顶
         sipush表示将一个短整形常量值(-32768 - 32767)推送至栈顶
         iconst_1表示将int类型1推送至栈顶 (iconst_1 - iconst_5)
	